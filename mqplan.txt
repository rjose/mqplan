MQPlan
======
Rino Jose <@rjose>
v1, Aug 26, 2013: Initial version

Overview
--------
The goal of this app is to assemble quarterly planning data from multiple
teams and present it in a concise form. The initial page should be an array of
shortage charts from each team. The app should be super simple. You can click
on a shortage chart. That's it. When you click on a shortage chart from the
initial screen, a detail view should be displayed on the right side of the
screen. This will show items that are resourced and items that are not
resourced. Dependencies on other teams should be indicated as well. If a
dependency is unfunded, it should be indicated somehow. We should probably
follow the dependency chain to the end and indicate which parts are in red.
There's some logic here.

Clicking on a selected shortage chart should move back to the initial view.
Clicking on a different shortage chart should move to that team's selected
state.


Implementation
--------------
. [X] Set up mqplan repo with qplan subtree [X][][]
. Draw array of shortage charts [][][][][]
. Animate shortage charts to show detailed view [][][][][]
. Display detailed view [][][][][][][] (need data, need to resize svg, need
hash fragments)
. cat data from multiple qplan servers into a stacked file [][][][]


1 - Set up mqplan repo with qplan subtree
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Where should we add the qplan subtree? Maybe we should add a "modules"
directory and put qplan in there. We can always change this.

We should probably tag qplan first and then tag it again when it's been
modified for mqplan. I'll have to refer to my notes for qplan to add a
subtree. OK, here's what we'll do:

        . git remote add qp_remote git@github.com:rjose/qplan.git
        . git fetch qp_remote
        . git checkout -b qp_branch qp_remote/master
        . git checkout master
        . git read-tree --prefix=modules/qplan/ -u qp_branch
        . git commit

Done!


2 - Draw array of shortage animation charts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The box charts are somewhat similar to this. I'll review the code there a
little and see if I can draw an array of shortage charts. I'll use my
live.html file as a starting point and add some functions to hook things up.
To get this moving, I also need to get my server compiling. OK, I got it
compiled. Let's get the lua files set up. Done. It's kindof hacked up, but
that's ok. I'll create a setup branch and check in there. Done.

OK, let's create a controller that we can use to add scope to. I'll unhook the
websocket stuff and focus on getting an array of charts rendered. OK, I have a
controller that can put a title into a page. Let's review box charts next.
They're adding an svg element for each box. Why couldn't we just add "g"
objects to a parent svg element? I'd have to supply an array of shortage chart
data. Let's add this to a controller scope and see if we can render it.

Alright, I put some data together with 2 charts. Let's try adding them next.
OK, I added one chart. I think we need to add these as a group. Before we do
this, let's check in. Alright, let's see if we can add charts to a group.

Thoughts
--------
We should be able to pipe data into mqplan directly (sectioned by team). To
start, let's just cat data from multiple sources into mqplan. Maybe this is
how we should always do this.

At some point, we should split qplan up into a generic server module that we
can pull into mqplan and qplan.


Action Items
------------
- Make charts into their own module and share between qplan and mqplan
