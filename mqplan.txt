MQPlan
======
Rino Jose <@rjose>
v1, Aug 26, 2013: Initial version

Overview
--------
The goal of this app is to assemble quarterly planning data from multiple
teams and present it in a concise form. The initial page should be an array of
shortage charts from each team. The app should be super simple. You can click
on a shortage chart. That's it. When you click on a shortage chart from the
initial screen, a detail view should be displayed on the right side of the
screen. This will show items that are resourced and items that are not
resourced. Dependencies on other teams should be indicated as well. If a
dependency is unfunded, it should be indicated somehow. We should probably
follow the dependency chain to the end and indicate which parts are in red.
There's some logic here.

Clicking on a selected shortage chart should move back to the initial view.
Clicking on a different shortage chart should move to that team's selected
state.


Implementation
--------------
. [X] Set up mqplan repo with qplan subtree [X][][]
. [X] Draw array of shortage charts [X][X][X][X][X]
. [X] Lay out shortage charts [X][X][X][X][X][]
. Animate shortage charts to show detailed view [X][X][X][][]
. Display detailed view [][][][][][][] (need data, need to resize svg, need
hash fragments)
. cat data from multiple qplan servers into a stacked file [][][][]


1 - Set up mqplan repo with qplan subtree
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Where should we add the qplan subtree? Maybe we should add a "modules"
directory and put qplan in there. We can always change this.

We should probably tag qplan first and then tag it again when it's been
modified for mqplan. I'll have to refer to my notes for qplan to add a
subtree. OK, here's what we'll do:

        . git remote add qp_remote git@github.com:rjose/qplan.git
        . git fetch qp_remote
        . git checkout -b qp_branch qp_remote/master
        . git checkout master
        . git read-tree --prefix=modules/qplan/ -u qp_branch
        . git commit

Done!


2 - Draw array of shortage animation charts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The box charts are somewhat similar to this. I'll review the code there a
little and see if I can draw an array of shortage charts. I'll use my
live.html file as a starting point and add some functions to hook things up.
To get this moving, I also need to get my server compiling. OK, I got it
compiled. Let's get the lua files set up. Done. It's kindof hacked up, but
that's ok. I'll create a setup branch and check in there. Done.

OK, let's create a controller that we can use to add scope to. I'll unhook the
websocket stuff and focus on getting an array of charts rendered. OK, I have a
controller that can put a title into a page. Let's review box charts next.
They're adding an svg element for each box. Why couldn't we just add "g"
objects to a parent svg element? I'd have to supply an array of shortage chart
data. Let's add this to a controller scope and see if we can render it.

Alright, I put some data together with 2 charts. Let's try adding them next.
OK, I added one chart. I think we need to add these as a group. Before we do
this, let's check in. Alright, let's see if we can add charts to a group. OK,
I was able to draw an array of charts (very hacked up). Let's check this in
(with the intent to rebase out). Given this exercise, I realize that we also
need functions to layout the charts ahead of time (size, positions, num
columns).

Before we go, let's hook up a click handler for each chart. We may want to
shrink the font size down as well. Done! OK, let's try animating to a position
on click. Done!


3 - Lay out shortage charts
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Alright, the first thing I want to do is figure out how testing is managed in
angular. Once I have that in place, I'll do some TDD on laying out charts.
We'll start with just the straight chart data. Eventually, we'll draw lines
for dependencies as well. Let's just install mocha and run our tests in our
own way. OK, mocha works. Let's add a javascript vim syntax file before we
proceed. Done!

Now let's start thinking about laying out charts. We'll start with one chart.
This should be centered horizontally in the space but near the top. We should
specify the chart width and get back a chart height. I suppose this should be
one function.

OK, let's see if we can figure out the sequence of steps. When the chart data
is set in the scope, we should check if a chart is selected or not. This will
set the width. I'll add a note to this effect and go on. Done. Let's check
this in.

Next, let's write a layout function for the charts and figure out where to
call it and use it. I want to pass in an array of charts and get back an array
of layouts whose indices correspond to the chart array. Done! Let's check this
in and then work on chart size. The chart size should be proportional to the
total demand/supply. This seems like a good candidate for a test. Let's write
a function to compute this for one chart. Done. Let's check this in. OK, now
we can map this function over an array of charts. Done. Now, let's scale the
sizes. This seems like a TDD thing. Done! Also did normalizeDimensions. Let's
check this in. OK, now let's change the chart size based on this. Hmmm. We
need to change the size at the call of "draw". Done!

OK, a couple more things here. First, let's center the charts on x. I think we
need to pass the chart sizes into getChartLayout. Done. Let's check in.
Second, let's add the chart title. We may need to add some margins. OK, the
titles are being displayed. Let's get the margins working. Looks pretty good.
Just need to center the titles. Done!

4 - Animate shortage charts to show detailed view
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Let's start by computing the layout for a selected chart. We'll move it to the
top center and then move all the other charts below it. We'll trigger this on
click. OK, I can wire things up. I think I should add some metadata to the
data on initialization. Let me try exploring this. Done. Let's check this in.

Alright, I can now select all of the shortage charts from my click handler.
What I want to do next is to compute a new layout and apply it. Let's hack up
a layout and give this a try. OK, I can switch between layouts now. Tomorrow,
I'll try to come up with a selected chart layout. I'll also want to resize the
size of the chart area and bring in a detailed chart view.

Let's start by resizing the chart size. When should this happen? OK, I added
this in the click handler of the controller (but we should move all of that UI
code out ASAP). Now, let's do a really quick layout. We want to put one item at
the top and the others below. We'll pack them. Done! Let's check this in.


Thoughts
--------
We should be able to pipe data into mqplan directly (sectioned by team). To
start, let's just cat data from multiple sources into mqplan. Maybe this is
how we should always do this.

At some point, we should split qplan up into a generic server module that we
can pull into mqplan and qplan.

I need to figure out how resize and layout happen when an item is clicked. It
seems like this should go through the angular controller, no?


Action Items
------------
- Add title to charts
- Scale down fonts
- Add number of people as well
- Handle dependencies to empty shortage charts
- Make charts into their own module and share between qplan and mqplan
- Need to clean up the charts (renaming, changing signatures)
- Figure out how to create namespaces without using global vars
